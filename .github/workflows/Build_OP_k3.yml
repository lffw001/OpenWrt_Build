名称：Build_k3

上：
  存储库调度：
  工作流调度：

#定时触发编译
  时间表：
    -定时任务：0 22 * * *

#点赞☆星辰触发
#  观看：
#    类型：[开始]

工作：
  构建_k3：
    运行：ubuntu-20.04
    步骤：
    -名称：克隆存储库
      用途：动作/结帐@v2

    -名称：初始化环境
      环境：
        DEBIAN_FRONTEND :非交互式
      运行：|
        须藤 -E 交换 -a
        须藤 -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        须藤 -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full libsslp texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply hasged lrzsz device-tree-compiler scons
        wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    -名称：克隆源代码
      环境：
        REPO_URL : https://github.com/xiangfeidexiaohuo/lede
        REPO_BRANCH : K3
      运行：|
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/lean1.sh ./
        chmod +x ./lean1.sh && ./lean1.sh
    -名称：更新和安装提要
      工作目录：./openwrt
      运行：|
        ./scripts/feeds 更新 -a
        ./scripts/feeds install -a
        cp -f ../diy/lean2.sh ./        
        chmod +x ./lean2.sh && ./lean2.sh       
        sed -i 's/+!TARGET_ramips:kmod-usb-storage-uas //g' ./package/lean/automount/Makefile
        echo 'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_armv5.tar.gz' > feeds/xiangfeidexiaohuo/luci-app-adguardhome/root/usr/share/AdGuardHome/links.txt
        sed -i "s/hostname='OpenWrt'/hostname='AE86-K3'/g" package/base-files/files/bin/config_generate
       
              
    -名称：配置定制 - Build_k3
      环境：
        配置文件：' ./configs /k3.config '
      运行：|
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
        
    -名称：下载包
      工作目录：./openwrt
      运行：|
        进行下载 -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    -名称：构建固件
      工作目录：./openwrt
      运行：|
        make -j$(nproc) V=s
        
    -名称：组装工件
      id : assemble_artifact
      运行：|
        rm -rf ./K3_Out
        mkdir -p ./K3_Out/
        cp -a openwrt/bin/targets/bcm53xx/generic/openwrt-bcm53xx-generic-phicomm_k3-squashfs.trx ./K3_Out/K3-OpenWrt-5.4-$(date +%Y%m%d)_longfeifengwu.trx
               
    -名称：上传固件
      用途：动作/上传工件@main
      与：
        名称：K3-OpenWrt_504
        路径：K3_Out/*.trx   
        
    -名称：生成标签和发布名称
      id : generate_name
      运行：|
        时间=$（日期+%Y%m%d%H%M）
        release_tag="$time"
        release_name="斐讯K3-OpenWrt-5.4内核-$(date +%Y%m%d)"
        echo "##[set-output name=release_name;]$release_name"
        echo "##[set-output name=release_tag;]$release_tag"        
    -名称：创建发布和上传
      用途：ncipollo/release-action@v1
      与：
        工件：K3_Out/*.trx
        名称：${{ steps.generate_name.outputs.release_name }}
        标签：${{ steps.generate_name.outputs.release_tag }}
        令牌：${{secrets.GITHUB_TOKEN }}                 
